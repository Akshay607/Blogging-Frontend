{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akshay.neje\\\\Documents\\\\akshay\\\\projects\\\\blogging app\\\\frontend\\\\blog\\\\src\\\\components\\\\Tweet.js\",\n  _s = $RefreshSig$();\nimport { FaComments, FaHeart, FaShare } from \"react-icons/fa\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { DomainURL } from \"../constants\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TweetsPage() {\n  _s();\n  const [tweets, setTweets] = useState([]); // State to hold the tweets\n  const [loading, setLoading] = useState(true); // State to handle loading state\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    // Define an async function to fetch tweets\n    const fetchTweets = async () => {\n      try {\n        const res = await getAllTweets();\n        setTweets(res); // Assuming res is the array of tweets\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTweets(); // Call the async function\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tweet list\",\n      children: (tweets === null || tweets === void 0 ? void 0 : tweets.length) === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tweets available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: tweets === null || tweets === void 0 ? void 0 : tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: tweet.content\n        }, tweet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this) // Render each tweet\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create tweet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TweetsPage, \"TsviQxYgQYw3EKAENgdCofvw9w8=\");\n_c = TweetsPage;\nexport default TweetsPage;\n\n// function Tweet(prop){\n//   const{ user,tweet}=prop\n//   return (\n//     <>\n//       <div id=\"tweet-profile\">\n//       <img\n//           src={user.avatarUrl}\n//           alt={user.username}\n//           className=\"h-12 w-16 rounded-full object-cover mr-8\"\n//         />\n//         <div>\n//           <p>{user.username}</p>\n//           <p>{user.name} </p>\n//         </div>\n//         <div>\n//           <p>{tweet.creationDateTime}</p>\n//         </div>\n//       </div>\n//       <div id=\"tweet-body\">\n//         <p>{tweet.title}</p>\n//         <pre>\n//           {tweet.body}\n//         </pre>\n\n//       </div>\n//       <div id=\"tweet-bott-bar\">\n//       <FaHeart></FaHeart>\n//       <FaComments></FaComments>\n//       <FaShare></FaShare>\n\n//       </div>\n//       <div id=\"tweet-comment\">\n\n//       </div>\n\n//     </>\n//   )\n// }\n\nconst getAllTweets = async () => {\n  try {\n    const res = await axios.get(`${DomainURL}/tweets/get-all-tweets`);\n    console.log('tweets', res);\n    return res.data.data;\n  } catch (err) {\n    return err;\n  }\n};\nexport { TweetsPage };\nvar _c;\n$RefreshReg$(_c, \"TweetsPage\");","map":{"version":3,"names":["FaComments","FaHeart","FaShare","React","useState","useEffect","axios","DomainURL","jsxDEV","_jsxDEV","Fragment","_Fragment","TweetsPage","_s","tweets","setTweets","loading","setLoading","error","setError","fetchTweets","res","getAllTweets","err","children","fileName","_jsxFileName","lineNumber","columnNumber","message","className","length","map","tweet","content","id","_c","get","console","log","data","$RefreshReg$"],"sources":["C:/Users/akshay.neje/Documents/akshay/projects/blogging app/frontend/blog/src/components/Tweet.js"],"sourcesContent":["import { FaComments, FaHeart,FaShare} from \"react-icons/fa\";\r\nimport React,{useState,useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport { DomainURL } from \"../constants\";\r\n\r\n\r\n\r\n\r\nfunction TweetsPage() {\r\n  const [tweets, setTweets] = useState([]); // State to hold the tweets\r\n  const [loading, setLoading] = useState(true); // State to handle loading state\r\n  const [error, setError] = useState(null); // State to handle errors\r\n\r\n  useEffect(() => {\r\n    // Define an async function to fetch tweets\r\n    const fetchTweets = async () => {\r\n      try {\r\n        const res = await getAllTweets();\r\n        setTweets(res); // Assuming res is the array of tweets\r\n      } catch (err) {\r\n        setError(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTweets(); // Call the async function\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"tweet list\">\r\n        {/* Render the list of tweets */}\r\n        {tweets?.length === 0 ? (\r\n          <p>No tweets available.</p>\r\n        ) : (\r\n          <ul>\r\n            {tweets?.map(tweet => (\r\n              <li key={tweet.id}>{tweet.content}</li> // Render each tweet\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      <div className=\"create tweet\">\r\n        {/* Your form or component for creating new tweets */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TweetsPage;\r\n\r\n\r\n// function Tweet(prop){\r\n//   const{ user,tweet}=prop\r\n//   return (\r\n//     <>\r\n//       <div id=\"tweet-profile\">\r\n//       <img\r\n//           src={user.avatarUrl}\r\n//           alt={user.username}\r\n//           className=\"h-12 w-16 rounded-full object-cover mr-8\"\r\n//         />\r\n//         <div>\r\n//           <p>{user.username}</p>\r\n//           <p>{user.name} </p>\r\n//         </div>\r\n//         <div>\r\n//           <p>{tweet.creationDateTime}</p>\r\n//         </div>\r\n//       </div>\r\n//       <div id=\"tweet-body\">\r\n//         <p>{tweet.title}</p>\r\n//         <pre>\r\n//           {tweet.body}\r\n//         </pre>\r\n\r\n//       </div>\r\n//       <div id=\"tweet-bott-bar\">\r\n//       <FaHeart></FaHeart>\r\n//       <FaComments></FaComments>\r\n//       <FaShare></FaShare>\r\n      \r\n\r\n//       </div>\r\n//       <div id=\"tweet-comment\">\r\n\r\n//       </div>\r\n    \r\n    \r\n//     </>\r\n//   )\r\n// }\r\n\r\nconst getAllTweets=async ()=>{\r\n  try{\r\n    const res = await axios.get(`${DomainURL}/tweets/get-all-tweets`)\r\n    console.log('tweets',res)\r\n    return res.data.data\r\n\r\n  }catch(err){\r\n    return err\r\n  }\r\n\r\n}\r\n\r\nexport {TweetsPage}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}